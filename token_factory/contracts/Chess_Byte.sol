//Contract based on https://docs.openzeppelin.com/contracts/3.x/erc721
// SPDX-License-Identifier: MIT
pragma solidity 0.7.0;

import "OpenZeppelin/openzeppelin-contracts@3.1.0-solc-0.7/contracts/token/ERC721/ERC721.sol";
import "OpenZeppelin/openzeppelin-contracts@3.1.0-solc-0.7/contracts/utils/Counters.sol";
import "OpenZeppelin/openzeppelin-contracts@3.1.0-solc-0.7/contracts//access/Ownable.sol";


contract Chess_Byte is ERC721, Ownable {

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    address public minter;
    uint256 public cprice;
    uint256 private pending_withdrawals;

    event Rhash(bytes32 value);
   
    constructor() ERC721("ChessByte", "CHY") {
        minter = msg.sender;
        cprice = 6100000000000000; // ~20 usd
    }

    function mint(string memory tokenURI)
        private 
        returns (uint256)
    {
        // If you are sending to a wrong address
        // you will loose money for a gas fee and nothing
        // we can do about it, so becarefull with your adress
        _tokenIds.increment();

        uint256 newItemId = _tokenIds.current();
        _mint(minter, newItemId);
        _setTokenURI(newItemId, tokenURI);

        return newItemId;
    }
    

    function buy_token(string memory tokenURI, 
                        bytes32 hash, uint8 v, bytes32 r, bytes32 s, 
                        uint256 tokenID, address contract_address) 
                        payable public
        {

        // Make sure msg is generated by minter
        bytes32 _hash = keccak256(abi.encodePacked(tokenID, tokenURI, msg.sender, address(this)));
        emit Rhash(_hash);
        emit Rhash(hash);
        require(hash == _hash);
        require(ecrecover(hash, v, r, s) == minter, "NFT not authorized by this contract");

        // Check id
        require(_tokenIds.current() + 1 == tokenID, "Token has wrong ID");
        // Check contract
        require(contract_address == address(this), "Trying to autherize with wrong contract");
        // Check ether sent
        require(msg.value >= cprice, "Insufficient funds to buy");

        // Create token first
        uint256 mint_id = mint(tokenURI);        
        // transfer the token to the buyer
        _transfer(minter, msg.sender, mint_id);
    }

    function update_price(uint256 new_price) onlyOwner public {
        cprice = new_price;
    }

    function token_size() onlyOwner public returns(uint256){
        return _tokenIds.current();
    }

    function withdraw() onlyOwner public {

        require(address(this).balance > 0);
        address payable receiver = payable(minter);

        uint256 amount = address(this).balance;
        receiver.transfer(amount);
    }
}